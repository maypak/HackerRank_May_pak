#정규식
정규표현식에 대해 잘 알지 못하고 있다는 것을 느낌.
이걸 완벽하게 이해해야하는지는 잘 모르겠음. 검색해가며 사용하면 될것같음 그러나 이해도는 높일 필요가 있다.

#자료구조
다양한 자료구조형들이 Java에는 이미 구현되어있음.
사용법은 대체로 알고있지만 직접 구현해본적이 없는 자료형이 많아서 이해의 깊이가 낮다.
추가학습하자.

#Time 및 Date 관련
상황도 다양하게 만나게 될 것이고 대응법도 다양하다. 하나만 바닥까지 파보자.

#자바 Comparable, Comparator
# ref : http://hochulshin.com/java-comparable-comparator/
Comparable = 해당 obj를 implement Comparable<T>, @Override int compareTo(T t)를 통해 Arrays.sort 혹은 Collection.sort가 가능하도록 해줌
Comparator = 외부클래스에서 implement Comparator<T>, @Override int compare(T t1, T t2) 구현 시 Arrays.sort 혹은 Collection.sort가 가능.

#자바 람다식
기본형 () -> {}
(int i) -> { // do something }

#처음보는 :: 사용법 발견


#자바 스트림
이것도 js의 스트림이랑 다른것같다
조금 더 파보자

#compareTo
비교 사용법은 자바 자료구조에서 핵심

#자료구조
step in & out, 비교, 체이닝 다지기.
List, Stack, Queue, Dequeue, Map 등은 시간을 들여서 차근차근.

#어노테이션
스프링에 국한된게 아니라 자바 자체 규격인듯함. 자바8이상에 대해 따로 학습해야할듯
https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_%EC%95%A0%EB%84%88%ED%85%8C%EC%9D%B4%EC%85%98
위키피디아 자료.
자바에는 내장 어노테이션이 존재함
코드에 적용되는 어노테이션
@Override
@Deprecated
@SuppressWarnings
애니메이션에 적용?
@Retention
@Documented
@Target
@Inherited
Java 7+~
@SafeVarargs
@FunctionalInterface
@Repeatable
각기 용도가 다르며 대표적으로 사용되는 Override는 Override가 아닌곳에 사용하면 에러를 반환하므로
오타나 실수 방지를 위해 사용하면 좋을것같다.
나머지는 이름에서 대충 추측가능한듯.


#var 키워드
java 10부터 사용 가능.
int i = 10;
String s = "hello";
Human h = new Human();
를
var i = 10;
var s = "hello";
var h = new Human();
로 사용하면 초깃값을 추측하여 자료형타입을 지정.
그러나 초기값만 지정해주므로 초기값이 결정되지 않으면 추론불가.
var i; <- 오류발생
출처: https://hannamedia.tistory.com/m/81?fbclid=IwAR1mQgBC_QDop4bZwwpWe3H-92AG2ajqDg7srOTjWaDtEcpxoHQQVJ2XGCA